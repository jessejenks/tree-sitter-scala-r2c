// This file was autogenerated by parse_grammar.lua from scalar2c.ebnf.

/*
 * inline constants: 
 * blockStatementSeq        := (_block_statement (_semicolon _block_statement)* _semicolon)
 * charEscapeSeq            := \\[btnfr"'\\]
 * charMinusQuoteDollar     := [^"\$]
 * charNoBQOrNL             := [\u0020-\u005f\u0061-\u007f]
 * classDef                 := (identifier: name) (type_parameters?: type_parameters) (constructor_annotation*: constructor_annotations)
 (access_modifier?: access_modifier)
 (class_parameters*: class_parameters)

 * decimal_numeral          := [0-9]+
 * escapeSeq                := ($unicodeEscape|$charEscapeSeq)
 *     ((\\u+[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]|\\[btnfr"'\\]))
 * exponentPart             := ([Ee][+-]?$decimal_numeral)
 *     (([Ee][+-]?[0-9]+))
 * floatType                := [FfDd]
 * floating_point_literal   := /-?($fp_lit_1|$fp_lit_2|$fp_lit_3|$fp_lit_4)/
 *     (/-?([0-9]+[.][0-9]+([Ee][+-]?[0-9]+)?[FfDd]?|[.][0-9]+([Ee][+-]?[0-9]+)?[FfDd]?|[0-9]+([Ee][+-]?[0-9]+)?[FfDd]|[0-9]+([Ee][+-]?[0-9]+)[FfDd]?)/)
 * fp_lit_1                 := $decimal_numeral[.]$decimal_numeral$exponentPart?$floatType?
 *     ([0-9]+[.][0-9]+([Ee][+-]?[0-9]+)?[FfDd]?)
 * fp_lit_2                 := [.]$decimal_numeral$exponentPart?$floatType?
 *     ([.][0-9]+([Ee][+-]?[0-9]+)?[FfDd]?)
 * fp_lit_3                 := $decimal_numeral$exponentPart?$floatType
 *     ([0-9]+([Ee][+-]?[0-9]+)?[FfDd])
 * fp_lit_4                 := $decimal_numeral$exponentPart$floatType?
 *     ([0-9]+([Ee][+-]?[0-9]+)[FfDd]?)
 * hexDigit                 := [0-9a-fA-F]
 * hex_numeral              := 0[xX]$hexDigit+
 *     (0[xX][0-9a-fA-F]+)
 * idRegex                  := $plainid|[`]($charNoBQOrNL|$escapeSeq)*[`]
 *     (([\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[\-!#%&*+/\\:<=>?@\u005e\u007c~]+)?|[\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F_][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[\-!#%&*+/\\:<=>?@\u005e\u007c~]+)?|[\-!#%&*+/\\:<=>?@\u005e\u007c~]+)|[`]([\u0020-\u005f\u0061-\u007f]|(\\u+[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]|\\[btnfr"'\\]))*[`])
 * idrest                   := [$(letter)0-9]*(_$opchar+)?
 *     ([\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[\-!#%&*+/\\:<=>?@\u005e\u007c~]+)?)
 * integer_literal          := /-?($decimal_numeral|$hex_numeral)[Ll]?/
 *     (/-?([0-9]+|0[xX][0-9a-fA-F]+)[Ll]?/)
 * letter                   := $upperChars$lowerChars
 *     (\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F)
 * lowerChars               := $lowerChars1$lowerChars2$lowerChars3
 *     (\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F)
 * lowerChars1              := \p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4
 * lowerChars2              := \u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C
 * lowerChars3              := \u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F
 * opchar                   := [\-!#%&*+/\\:<=>?@\u005e\u007c~]
 * plainid                  := ($upper$idrest|$varidRegex|$opchar+)
 *     (([\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[\-!#%&*+/\\:<=>?@\u005e\u007c~]+)?|[\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F_][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[\-!#%&*+/\\:<=>?@\u005e\u007c~]+)?|[\-!#%&*+/\\:<=>?@\u005e\u007c~]+))
 * topLevelStatementSeq     := (_top_level_statement (_semicolon _top_level_statement)* _semicolon?)
 * unicodeEscape            := \\u+$hexDigit$hexDigit$hexDigit$hexDigit
 *     (\\u+[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])
 * upper                    := [$upperChars]
 *     ([\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$])
 * upperChars               := \p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$
 * varidRegex               := [$(lowerChars)_]$idrest
 *     ([\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F_][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[\-!#%&*+/\\:<=>?@\u005e\u007c~]+)?)
 */

module.exports = grammar({
  name: 'scalar2c',

  /*
   * scalar2c.ebnf:1
   * extras     ::= { /\s/ comment }
   */
  extras: $ => [/\s/, $.comment],
  /*
   * scalar2c.ebnf:3
   * supertypes ::= { _expression _definition _pattern }
   */
  supertypes: $ => [$._expression, $._definition, $._pattern],
  /*
   * scalar2c.ebnf:5-7
   * externals  ::= {
   *                _automatic_semicolon
   *                }
   */
  externals: $ => [$._automatic_semicolon],
  /*
   * scalar2c.ebnf:9
   * inline     ::= { _pattern _semicolon _definition _type_identifier _param_type }
   */
  inline: $ => [$._pattern, $._semicolon, $._definition, $._type_identifier, $._param_type],
  /*
   * scalar2c.ebnf:11
   * conflicts  ::= { }
   */
  conflicts: $ => [],
  /*
   * scalar2c.ebnf:13
   * word       ::= identifier
   */
  word: $ => $.identifier,
  rules: {
    /*
     * scalar2c.ebnf:16-17
     * compilation_unit             ::= ('package' 1(package_identifier _semicolon))* $topLevelStatementSeq?
     *                                | $blockStatementSeq?
     */
    compilation_unit: $ => choice(
                             seq(
                               repeat(seq('package', prec(1, seq($.package_identifier, $._semicolon)))),
                               optional(
                                 seq(
                                   $._top_level_statement,
                                   repeat(seq($._semicolon, $._top_level_statement)),
                                   optional($._semicolon)
                                 )
                               )
                             ),
                             optional(
                               seq($._block_statement, repeat(seq($._semicolon, $._block_statement)), $._semicolon)
                             )
                           ),
    /*
     * scalar2c.ebnf:18-24
     * _literal                     ::= number
     *                                | boolean_literal
     *                                | character_literal
     *                                | symbol_literal
     *                                | string_literal
     *                                | interpolated_string
     *                                | 'null'
     */
    _literal: $ => choice(
                     $.number,
                     $.boolean_literal,
                     $.character_literal,
                     $.symbol_literal,
                     $.string_literal,
                     $.interpolated_string,
                     'null'
                   ),
    /*
     * scalar2c.ebnf:26-29
     * _top_level_statement         ::= 1(import_declaration
     *                                | _template_definition
     *                                | package_clause
     *                                | package_object)
     */
    _top_level_statement: $ => prec(
                                 1,
                                 choice($.import_declaration, $._template_definition, $.package_clause, $.package_object)
                               ),
    /*
     * scalar2c.ebnf:30-32
     * _template_statement          ::= import_declaration
     *                                | val_definition
     *                                | literal
     */
    _template_statement: $ => choice($.import_declaration, $.val_definition, $._literal),
    /*
     * scalar2c.ebnf:33
     * _template_definition         ::= _template_class_definition -> class_definition
     */
    _template_definition: $ => alias($._template_class_definition, $.class_definition),
    /*
     * scalar2c.ebnf:34
     * _block_class_definition      ::= annotation* local_modifier* $classDef
     */
    _block_class_definition: $ => seq(
                                    repeat($.annotation),
                                    repeat($.local_modifier),
                                    field('name', $.identifier),
                                    field('type_parameters', optional($.type_parameters)),
                                    field('constructor_annotations', repeat($.constructor_annotation)),
                                    field('access_modifier', optional($.access_modifier)),
                                    field('class_parameters', repeat($.class_parameters))
                                  ),
    /*
     * scalar2c.ebnf:35
     * _template_class_definition   ::= annotation* modifiers? 'case'? 'class' $classDef
     */
    _template_class_definition: $ => seq(
                                       repeat($.annotation),
                                       optional($.modifiers),
                                       optional('case'),
                                       'class',
                                       field('name', $.identifier),
                                       field('type_parameters', optional($.type_parameters)),
                                       field('constructor_annotations', repeat($.constructor_annotation)),
                                       field('access_modifier', optional($.access_modifier)),
                                       field('class_parameters', repeat($.class_parameters))
                                     ),
    /*
     * scalar2c.ebnf:43-52
     * _block_statement             ::= import_declaration
     *                                | _local_val_definition -> val_definition
     *                                | literal
     * ;PatVarDef            ::= 'val' PatDef
     *                        ;| 'var' VarDef
     * ;Def                  ::= 1(PatVarDef
     *                        ;| 'def' FunDef
     *                        ;| 'type' nl* TypeDef
     *                        ;| TmplDef)
     * ;PatDef               ::= Pattern2 (':' Type)? '=' Expr
     */
    _block_statement: $ => choice(
                             $.import_declaration,
                             alias($._local_val_definition, $.val_definition),
                             $._literal
                           ),
    /*
     * scalar2c.ebnf:54
     * package_identifier           ::= identifier ("." identifier)*
     */
    package_identifier: $ => seq($.identifier, repeat(seq(".", $.identifier))),
    /*
     * scalar2c.ebnf:55-67
     * _definition                  ::= package_clause
     *                                | package_object
     *                                | class_definition
     *                                | import_declaration
     *                                | object_definition
     *                                | trait_definition
     *                                | val_definition
     *                                | val_declaration
     *                                | var_definition
     *                                | var_declaration
     *                                | type_definition
     *                                | function_definition
     *                                | function_declaration
     */
    _definition: $ => choice(
                        $.package_clause,
                        $.package_object,
                        $.class_definition,
                        $.import_declaration,
                        $.object_definition,
                        $.trait_definition,
                        $.val_definition,
                        $.val_declaration,
                        $.var_definition,
                        $.var_declaration,
                        $.type_definition,
                        $.function_definition,
                        $.function_declaration
                      ),
    /*
     * scalar2c.ebnf:68
     * package_clause               ::= 'package' (package_identifier: name) '{' ($topLevelStatementSeq?: body) '}'
     */
    package_clause: $ => seq(
                           'package',
                           field('name', $.package_identifier),
                           '{',
                           field(
                             'body',
                             optional(
                               seq(
                                 $._top_level_statement,
                                 repeat(seq($._semicolon, $._top_level_statement)),
                                 optional($._semicolon)
                               )
                             )
                           ),
                           '}'
                         ),
    /*
     * scalar2c.ebnf:69
     * package_object               ::= 'package' 'object' _object_definition
     */
    package_object: $ => seq('package', 'object', $._object_definition),
    /*
     * scalar2c.ebnf:70
     * import_declaration           ::= 'import' (_import_expression (',' _import_expression)*)
     */
    import_declaration: $ => seq('import', seq($._import_expression, repeat(seq(',', $._import_expression)))),
    /*
     * scalar2c.ebnf:71
     * _import_expression           ::= ((stable_identifier | identifier): path) ('.' (wildcard | import_selectors))?
     */
    _import_expression: $ => seq(
                               field('path', choice($.stable_identifier, $.identifier)),
                               optional(seq('.', choice($.wildcard, $.import_selectors)))
                             ),
    /*
     * scalar2c.ebnf:72
     * import_selectors             ::= '{' ((identifier | renamed_identifier) (',' (identifier | renamed_identifier))*) '}'
     */
    import_selectors: $ => seq(
                             '{',
                             seq(
                               choice($.identifier, $.renamed_identifier),
                               repeat(seq(',', choice($.identifier, $.renamed_identifier)))
                             ),
                             '}'
                           ),
    /*
     * scalar2c.ebnf:73
     * renamed_identifier           ::= (identifier: name) '=>' ((identifier | wildcard): alias)
     */
    renamed_identifier: $ => seq(
                               field('name', $.identifier),
                               '=>',
                               field('alias', choice($.identifier, $.wildcard))
                             ),
    /*
     * scalar2c.ebnf:74
     * object_definition            ::= annotation* modifiers? 'case'? 'object' _object_definition
     */
    object_definition: $ => seq(
                              repeat($.annotation),
                              optional($.modifiers),
                              optional('case'),
                              'object',
                              $._object_definition
                            ),
    /*
     * scalar2c.ebnf:75
     * _object_definition           ::= (identifier: name) (extends_clause?: extend) (template_body?: body)
     */
    _object_definition: $ => seq(
                               field('name', $.identifier),
                               field('extend', optional($.extends_clause)),
                               field('body', optional($.template_body))
                             ),
    /*
     * scalar2c.ebnf:76-78
     * class_definition             ::= annotation* modifiers? 'case'? 'class' (identifier: name)
     *                                    (type_parameters?: type_parameters) (class_parameters*: class_parameters)
     *                                    (extends_clause?: extend) (template_body?: body)
     */
    class_definition: $ => seq(
                             repeat($.annotation),
                             optional($.modifiers),
                             optional('case'),
                             'class',
                             field('name', $.identifier),
                             field('type_parameters', optional($.type_parameters)),
                             field('class_parameters', repeat($.class_parameters)),
                             field('extend', optional($.extends_clause)),
                             field('body', optional($.template_body))
                           ),
    /*
     * scalar2c.ebnf:79-80
     * trait_definition             ::= 'trait' (identifier: name) (type_parameters?: type_parameters)
     *                                    (extends_clause?: extend) (template_body?: body)
     */
    trait_definition: $ => seq(
                             'trait',
                             field('name', $.identifier),
                             field('type_parameters', optional($.type_parameters)),
                             field('extend', optional($.extends_clause)),
                             field('body', optional($.template_body))
                           ),
    /*
     * scalar2c.ebnf:81
     * type_parameters              ::= '[' (_variant_type_parameter (',' _variant_type_parameter)*) ']'
     */
    type_parameters: $ => seq(
                            '[',
                            seq($._variant_type_parameter, repeat(seq(',', $._variant_type_parameter))),
                            ']'
                          ),
    /*
     * scalar2c.ebnf:82
     * _variant_type_parameter      ::= annotation* (covariant_type_parameter | contravariant_type_parameter | _type_parameter)
     */
    _variant_type_parameter: $ => seq(
                                    repeat($.annotation),
                                    choice($.covariant_type_parameter, $.contravariant_type_parameter, $._type_parameter)
                                  ),
    /*
     * scalar2c.ebnf:83
     * covariant_type_parameter     ::= '+' _type_parameter
     */
    covariant_type_parameter: $ => seq('+', $._type_parameter),
    /*
     * scalar2c.ebnf:84
     * contravariant_type_parameter ::= '-' _type_parameter
     */
    contravariant_type_parameter: $ => seq('-', $._type_parameter),
    /*
     * scalar2c.ebnf:85-86
     * _type_parameter              ::= ((wildcard | identifier): name) (type_parameters?: type_parameters)
     *                                    (upper_bound?: bound) (lower_bound?: bound) (view_bound*?: bound) (context_bound*?: bound)
     */
    _type_parameter: $ => seq(
                            field('name', choice($.wildcard, $.identifier)),
                            field('type_parameters', optional($.type_parameters)),
                            field('bound', optional($.upper_bound)),
                            field('bound', optional($.lower_bound)),
                            field('bound', optional(repeat($.view_bound))),
                            field('bound', optional(repeat($.context_bound)))
                          ),
    /*
     * scalar2c.ebnf:87
     * upper_bound                  ::= '<:' (_type: type)
     */
    upper_bound: $ => seq('<:', field('type', $._type)),
    /*
     * scalar2c.ebnf:88
     * lower_bound                  ::= '>:' (_type: type)
     */
    lower_bound: $ => seq('>:', field('type', $._type)),
    /*
     * scalar2c.ebnf:89
     * view_bound                   ::= '<%' (_type: type)
     */
    view_bound: $ => seq('<%', field('type', $._type)),
    /*
     * scalar2c.ebnf:90
     * context_bound                ::= ':' (_type: type)
     */
    context_bound: $ => seq(':', field('type', $._type)),
    /*
     * scalar2c.ebnf:91
     * template_body                ::= '{' _block? '}'
     */
    template_body: $ => seq('{', optional($._block), '}'),
    /*
     * scalar2c.ebnf:92
     * annotation                   ::= >('@' (_simple_type: name) (arguments*: arguments))
     */
    annotation: $ => prec.right(seq('@', field('name', $._simple_type), field('arguments', repeat($.arguments)))),
    /*
     * scalar2c.ebnf:93
     * constructor_annotation     ::= '@' (_simple_type: name) (arguments: arguments)
     */
    constructor_annotation: $ => seq('@', field('name', $._simple_type), field('arguments', $.arguments)),
    /*
     * scalar2c.ebnf:94-95
     * _local_val_definition        ::= annotation* ('implicit' -> implicit_modifier)? ('lazy' -> lazy_modifier)?
     *                                    'val' (_pattern: pattern) (':' (_type: type))? '=' (_expression: value)
     */
    _local_val_definition: $ => seq(
                                  repeat($.annotation),
                                  optional(alias('implicit', $.implicit_modifier)),
                                  optional(alias('lazy', $.lazy_modifier)),
                                  'val',
                                  field('pattern', $._pattern),
                                  optional(seq(':', field('type', $._type))),
                                  '=',
                                  field('value', $._expression)
                                ),
    /*
     * scalar2c.ebnf:97
     * val_definition               ::= annotation* modifiers? 'val' (_pattern: pattern) (':' (_type: type))? '=' (_expression: value)
     */
    val_definition: $ => seq(
                           repeat($.annotation),
                           optional($.modifiers),
                           'val',
                           field('pattern', $._pattern),
                           optional(seq(':', field('type', $._type))),
                           '=',
                           field('value', $._expression)
                         ),
    /*
     * scalar2c.ebnf:98
     * val_declaration              ::= annotation* modifiers? 'val' ((identifier: name) (',' (identifier: name))*) ':' (_type: type)
     */
    val_declaration: $ => seq(
                            repeat($.annotation),
                            optional($.modifiers),
                            'val',
                            seq(field('name', $.identifier), repeat(seq(',', field('name', $.identifier)))),
                            ':',
                            field('type', $._type)
                          ),
    /*
     * scalar2c.ebnf:99
     * var_declaration              ::= annotation* modifiers? 'var' ((identifier: name) (',' (identifier: name))*) ':' (_type: type)
     */
    var_declaration: $ => seq(
                            repeat($.annotation),
                            optional($.modifiers),
                            'var',
                            seq(field('name', $.identifier), repeat(seq(',', field('name', $.identifier)))),
                            ':',
                            field('type', $._type)
                          ),
    /*
     * scalar2c.ebnf:100
     * var_definition               ::= annotation* modifiers? 'var' (_pattern: pattern) (':' (_type: type))? '=' (_expression: value)
     */
    var_definition: $ => seq(
                           repeat($.annotation),
                           optional($.modifiers),
                           'var',
                           field('pattern', $._pattern),
                           optional(seq(':', field('type', $._type))),
                           '=',
                           field('value', $._expression)
                         ),
    /*
     * scalar2c.ebnf:101-102
     * type_definition              ::= annotation* modifiers? 'type' (_type_identifier: name)
     *                                    (type_parameters?: type_parameters) '=' (_type: type)
     */
    type_definition: $ => seq(
                            repeat($.annotation),
                            optional($.modifiers),
                            'type',
                            field('name', $._type_identifier),
                            field('type_parameters', optional($.type_parameters)),
                            '=',
                            field('type', $._type)
                          ),
    /*
     * scalar2c.ebnf:103-105
     * function_definition          ::= annotation* modifiers? 'def' (identifier: name) (type_parameters?: type_parameters)
     *                                    (parameters*: parameters) (':' (_type: return_type))?
     *                                    (('=' (_expression: body)) | (block: body))
     */
    function_definition: $ => seq(
                                repeat($.annotation),
                                optional($.modifiers),
                                'def',
                                field('name', $.identifier),
                                field('type_parameters', optional($.type_parameters)),
                                field('parameters', repeat($.parameters)),
                                optional(seq(':', field('return_type', $._type))),
                                choice(seq('=', field('body', $._expression)), field('body', $.block))
                              ),
    /*
     * scalar2c.ebnf:106-107
     * function_declaration         ::= annotation* modifiers? 'def' (identifier: name) (type_parameters?: type_parameters)
     *                                    (parameters*: parameters) (':' (_type: return_type))?
     */
    function_declaration: $ => seq(
                                 repeat($.annotation),
                                 optional($.modifiers),
                                 'def',
                                 field('name', $.identifier),
                                 field('type_parameters', optional($.type_parameters)),
                                 field('parameters', repeat($.parameters)),
                                 optional(seq(':', field('return_type', $._type)))
                               ),
    /*
     * scalar2c.ebnf:108
     * local_modifier               ::= 1('abstract' | 'final' | 'sealed' | 'implicit' | 'lazy')
     */
    local_modifier: $ => prec(1, choice('abstract', 'final', 'sealed', 'implicit', 'lazy')),
    /*
     * scalar2c.ebnf:109
     * access_modifier              ::= ('private' | 'protected') access_qualifier?
     */
    access_modifier: $ => seq(choice('private', 'protected'), optional($.access_qualifier)),
    /*
     * scalar2c.ebnf:110
     * access_qualifier             ::= '[' (identifier | 'this') ']'
     */
    access_qualifier: $ => seq('[', choice($.identifier, 'this'), ']'),
    /*
     * scalar2c.ebnf:111
     * modifiers                    ::= (local_modifier | access_modifier | 'override')+
     */
    modifiers: $ => repeat1(choice($.local_modifier, $.access_modifier, 'override')),
    /*
     * scalar2c.ebnf:112
     * extends_clause               ::= 'extends' (_type: type) arguments?
     */
    extends_clause: $ => seq('extends', field('type', $._type), optional($.arguments)),
    /*
     * scalar2c.ebnf:113
     * class_parameters             ::= '(' 'implicit'? (class_parameter (',' class_parameter)*)? ')'
     */
    class_parameters: $ => seq(
                             '(',
                             optional('implicit'),
                             optional(seq($.class_parameter, repeat(seq(',', $.class_parameter)))),
                             ')'
                           ),
    /*
     * scalar2c.ebnf:114
     * parameters                   ::= '(' 'implicit'? (parameter (',' parameter)*)? ')'
     */
    parameters: $ => seq(
                       '(',
                       optional('implicit'),
                       optional(seq($.parameter, repeat(seq(',', $.parameter)))),
                       ')'
                     ),
    /*
     * scalar2c.ebnf:115-116
     * class_parameter              ::= annotation* ('val' | 'var')? (identifier: name) (':' (_type: type))?
     *                                    ('=' (_expression: default_value))?
     */
    class_parameter: $ => seq(
                            repeat($.annotation),
                            optional(choice('val', 'var')),
                            field('name', $.identifier),
                            optional(seq(':', field('type', $._type))),
                            optional(seq('=', field('default_value', $._expression)))
                          ),
    /*
     * scalar2c.ebnf:117
     * parameter                    ::= annotation* (identifier: name) (':' (_param_type: type))? ('=' (_expression: default_value))?
     */
    parameter: $ => seq(
                      repeat($.annotation),
                      field('name', $.identifier),
                      optional(seq(':', field('type', $._param_type))),
                      optional(seq('=', field('default_value', $._expression)))
                    ),
    /*
     * scalar2c.ebnf:118
     * _block                       ::= <(((_expression | _definition) (_semicolon (_expression | _definition))*) _semicolon?)
     */
    _block: $ => prec.left(
                   seq(
                     seq(
                       choice($._expression, $._definition),
                       repeat(seq($._semicolon, choice($._expression, $._definition)))
                     ),
                     optional($._semicolon)
                   )
                 ),
    /*
     * scalar2c.ebnf:119
     * block                        ::= '{' _block? '}'
     */
    block: $ => seq('{', optional($._block), '}'),
    /*
     * scalar2c.ebnf:120
     * _type                        ::= function_type | compound_type | infix_type | _annotated_type
     */
    _type: $ => choice($.function_type, $.compound_type, $.infix_type, $._annotated_type),
    /*
     * scalar2c.ebnf:121
     * _annotated_type              ::= >(_simple_type annotation*)
     */
    _annotated_type: $ => prec.right(seq($._simple_type, repeat($.annotation))),
    /*
     * scalar2c.ebnf:122
     * _simple_type                 ::= generic_type | projected_type | stable_type_identifier | _type_identifier
     */
    _simple_type: $ => choice($.generic_type, $.projected_type, $.stable_type_identifier, $._type_identifier),
    /*
     * scalar2c.ebnf:123
     * compound_type                ::= 3((_annotated_type: base) ('with' (_annotated_type: extra))+)
     */
    compound_type: $ => prec(
                          3,
                          seq(
                            field('base', $._annotated_type),
                            repeat1(seq('with', field('extra', $._annotated_type)))
                          )
                        ),
    /*
     * scalar2c.ebnf:124-126
     * infix_type                   ::= <2(((compound_type | infix_type | _annotated_type): left)
     *                                    ((identifier): operator)
     *                                    ((compound_type | infix_type | _annotated_type): right))
     */
    infix_type: $ => prec.left(
                       2,
                       seq(
                         field('left', choice($.compound_type, $.infix_type, $._annotated_type)),
                         field('operator', $.identifier),
                         field('right', choice($.compound_type, $.infix_type, $._annotated_type))
                       )
                     ),
    /*
     * scalar2c.ebnf:127
     * stable_type_identifier       ::= (identifier | stable_identifier) '.' _type_identifier
     */
    stable_type_identifier: $ => seq(choice($.identifier, $.stable_identifier), '.', $._type_identifier),
    /*
     * scalar2c.ebnf:128
     * stable_identifier            ::= (identifier | stable_identifier) '.' identifier
     */
    stable_identifier: $ => seq(choice($.identifier, $.stable_identifier), '.', $.identifier),
    /*
     * scalar2c.ebnf:129
     * generic_type                 ::= (_simple_type: type) (type_arguments: type_arguments)
     */
    generic_type: $ => seq(field('type', $._simple_type), field('type_arguments', $.type_arguments)),
    /*
     * scalar2c.ebnf:130
     * projected_type               ::= (_simple_type: type) '#' (_type_identifier: selector)
     */
    projected_type: $ => seq(field('type', $._simple_type), '#', field('selector', $._type_identifier)),
    /*
     * scalar2c.ebnf:131
     * function_type                ::= >((parameter_types: parameter_types) '=>' (_type: return_type))
     */
    function_type: $ => prec.right(
                          seq(field('parameter_types', $.parameter_types), '=>', field('return_type', $._type))
                        ),
    /*
     * scalar2c.ebnf:132-135
     * parameter_types              ::= -1(_annotated_type
     *                                | ~1('(' (_param_type (',' _param_type)*)? ')')
     *                                | compound_type
     *                                | infix_type)
     */
    parameter_types: $ => prec(
                            -1,
                            choice(
                              $._annotated_type,
                              prec.dynamic(1, seq('(', optional(seq($._param_type, repeat(seq(',', $._param_type)))), ')')),
                              $.compound_type,
                              $.infix_type
                            )
                          ),
    /*
     * scalar2c.ebnf:136
     * _param_type                  ::= _type | lazy_parameter_type | repeated_parameter_type
     */
    _param_type: $ => choice($._type, $.lazy_parameter_type, $.repeated_parameter_type),
    /*
     * scalar2c.ebnf:137
     * lazy_parameter_type          ::= '=>' (_type: type)
     */
    lazy_parameter_type: $ => seq('=>', field('type', $._type)),
    /*
     * scalar2c.ebnf:138
     * repeated_parameter_type      ::= (_type: type) '*'
     */
    repeated_parameter_type: $ => seq(field('type', $._type), '*'),
    /*
     * scalar2c.ebnf:139
     * _type_identifier             ::= identifier -> type_identifier
     */
    _type_identifier: $ => alias($.identifier, $.type_identifier),
    /*
     * scalar2c.ebnf:140-152
     * _pattern                     ::= identifier
     *                                | capture_pattern
     *                                | tuple_pattern
     *                                | case_class_pattern
     *                                | infix_pattern
     *                                | alternative_pattern
     *                                | typed_pattern
     *                                | number
     *                                | boolean_literal
     *                                | character_literal
     *                                | symbol_literal
     *                                | string_literal
     *                                | wildcard
     */
    _pattern: $ => choice(
                     $.identifier,
                     $.capture_pattern,
                     $.tuple_pattern,
                     $.case_class_pattern,
                     $.infix_pattern,
                     $.alternative_pattern,
                     $.typed_pattern,
                     $.number,
                     $.boolean_literal,
                     $.character_literal,
                     $.symbol_literal,
                     $.string_literal,
                     $.wildcard
                   ),
    /*
     * scalar2c.ebnf:153
     * case_class_pattern           ::= ((_type_identifier | stable_type_identifier): type) '(' ((_pattern (',' _pattern)*)?: pattern) ')'
     */
    case_class_pattern: $ => seq(
                               field('type', choice($._type_identifier, $.stable_type_identifier)),
                               '(',
                               field('pattern', optional(seq($._pattern, repeat(seq(',', $._pattern))))),
                               ')'
                             ),
    /*
     * scalar2c.ebnf:154
     * infix_pattern                ::= <2((_pattern: left) ((identifier): operator) (_pattern: right))
     */
    infix_pattern: $ => prec.left(
                          2,
                          seq(
                            field('left', $._pattern),
                            field('operator', $.identifier),
                            field('right', $._pattern)
                          )
                        ),
    /*
     * scalar2c.ebnf:155
     * capture_pattern              ::= 1((identifier: name) '@' (_pattern: pattern))
     */
    capture_pattern: $ => prec(1, seq(field('name', $.identifier), '@', field('pattern', $._pattern))),
    /*
     * scalar2c.ebnf:156
     * typed_pattern                ::= -1((_pattern: pattern) ':' (_type: type))
     */
    typed_pattern: $ => prec(-1, seq(field('pattern', $._pattern), ':', field('type', $._type))),
    /*
     * scalar2c.ebnf:157
     * alternative_pattern          ::= <-2(_pattern '|' _pattern)
     */
    alternative_pattern: $ => prec.left(-2, seq($._pattern, '|', $._pattern)),
    /*
     * scalar2c.ebnf:158
     * tuple_pattern                ::= '(' _pattern (',' _pattern)+ ')'
     */
    tuple_pattern: $ => seq('(', $._pattern, repeat1(seq(',', $._pattern)), ')'),
    /*
     * scalar2c.ebnf:159-167
     * _expression                  ::= if_expression
     *                                | match_expression
     *                                | try_expression
     *                                | for_expression
     *                                | call_expression
     *                                | generic_function
     *                                | assignment_expression
     *                                | infix_expression
     *                                | _simple_expression
     */
    _expression: $ => choice(
                        $.if_expression,
                        $.match_expression,
                        $.try_expression,
                        $.for_expression,
                        $.call_expression,
                        $.generic_function,
                        $.assignment_expression,
                        $.infix_expression,
                        $._simple_expression
                      ),
    /*
     * scalar2c.ebnf:168-181
     * _simple_expression           ::= interpolated_string
     *                                | parenthesized_expression
     *                                | field_expression
     *                                | instance_expression
     *                                | prefix_expression
     *                                | tuple_expression
     *                                | case_block
     *                                | block
     *                                | identifier
     *                                | number
     *                                | boolean_literal
     *                                | character_literal
     *                                | symbol_literal
     *                                | string_literal
     */
    _simple_expression: $ => choice(
                               $.interpolated_string,
                               $.parenthesized_expression,
                               $.field_expression,
                               $.instance_expression,
                               $.prefix_expression,
                               $.tuple_expression,
                               $.case_block,
                               $.block,
                               $.identifier,
                               $.number,
                               $.boolean_literal,
                               $.character_literal,
                               $.symbol_literal,
                               $.string_literal
                             ),
    /*
     * scalar2c.ebnf:182-183
     * if_expression                ::= >('if' (parenthesized_expression: condition) (_expression: consequence)
     *                                    ('else' (_expression: alternative))?)
     */
    if_expression: $ => prec.right(
                          seq(
                            'if',
                            field('condition', $.parenthesized_expression),
                            field('consequence', $._expression),
                            optional(seq('else', field('alternative', $._expression)))
                          )
                        ),
    /*
     * scalar2c.ebnf:184
     * match_expression             ::= (_expression: value) 'match' (case_block: body)
     */
    match_expression: $ => seq(field('value', $._expression), 'match', field('body', $.case_block)),
    /*
     * scalar2c.ebnf:185
     * try_expression               ::= >('try' (_expression: body) catch_clause? finally_clause?)
     */
    try_expression: $ => prec.right(
                           seq(
                             'try',
                             field('body', $._expression),
                             optional($.catch_clause),
                             optional($.finally_clause)
                           )
                         ),
    /*
     * scalar2c.ebnf:186
     * catch_clause                 ::= >('catch' case_block)
     */
    catch_clause: $ => prec.right(seq('catch', $.case_block)),
    /*
     * scalar2c.ebnf:187
     * finally_clause               ::= >('finally' _expression)
     */
    finally_clause: $ => prec.right(seq('finally', $._expression)),
    /*
     * scalar2c.ebnf:188
     * case_block                   ::= -1('{' '}') | ('{' case_clause+ '}')
     */
    case_block: $ => choice(prec(-1, seq('{', '}')), seq('{', repeat1($.case_clause), '}')),
    /*
     * scalar2c.ebnf:189
     * case_clause                  ::= <('case' (_pattern: pattern) guard? '=>' (_block?: body))
     */
    case_clause: $ => prec.left(
                        seq(
                          'case',
                          field('pattern', $._pattern),
                          optional($.guard),
                          '=>',
                          field('body', optional($._block))
                        )
                      ),
    /*
     * scalar2c.ebnf:190
     * guard                        ::= 'if' (_expression: condition)
     */
    guard: $ => seq('if', field('condition', $._expression)),
    /*
     * scalar2c.ebnf:192
     * enumerators                  ::= <(generator (_semicolon generator)*)
     */
    enumerators: $ => prec.left(seq($.generator, repeat(seq($._semicolon, $.generator)))),
    /*
     * scalar2c.ebnf:193
     * generator                    ::= <(_pattern '<-' _expression (_semicolon? guard | _semicolon _pattern '=' _expression)*)
     */
    generator: $ => prec.left(
                      seq(
                        $._pattern,
                        '<-',
                        $._expression,
                        repeat(
                          choice(
                            seq(optional($._semicolon), $.guard),
                            seq($._semicolon, $._pattern, '=', $._expression)
                          )
                        )
                      )
                    ),
    /*
     * scalar2c.ebnf:194
     * for_expression               ::= 3<('for' ('(' enumerators ')' | '{' enumerators _semicolon?  '}') '\n'* 'yield'? _expression)
     */
    for_expression: $ => prec.left(
                           3,
                           seq(
                             'for',
                             choice(
                               seq('(', $.enumerators, ')'),
                               seq('{', $.enumerators, optional($._semicolon), '}')
                             ),
                             repeat('\n'),
                             optional('yield'),
                             $._expression
                           )
                         ),
    /*
     * scalar2c.ebnf:196
     * assignment_expression        ::= >1((_expression: left) '=' (_expression: right))
     */
    assignment_expression: $ => prec.right(1, seq(field('left', $._expression), '=', field('right', $._expression))),
    /*
     * scalar2c.ebnf:197
     * generic_function             ::= 4((_expression: function) (type_arguments: type_arguments))
     */
    generic_function: $ => prec(
                             4,
                             seq(field('function', $._expression), field('type_arguments', $.type_arguments))
                           ),
    /*
     * scalar2c.ebnf:198
     * call_expression              ::= 4((_expression: function) (arguments: arguments) ((block | case_block)?: body))
     */
    call_expression: $ => prec(
                            4,
                            seq(
                              field('function', $._expression),
                              field('arguments', $.arguments),
                              field('body', optional(choice($.block, $.case_block)))
                            )
                          ),
    /*
     * scalar2c.ebnf:199
     * field_expression             ::= 4((_expression: value) '.' (identifier: field))
     */
    field_expression: $ => prec(4, seq(field('value', $._expression), '.', field('field', $.identifier))),
    /*
     * scalar2c.ebnf:200
     * instance_expression          ::= 3('new' _expression)
     */
    instance_expression: $ => prec(3, seq('new', $._expression)),
    /*
     * scalar2c.ebnf:201
     * infix_expression             ::= <2((_simple_expression: left) ((identifier): operator) (_expression: right))
     */
    infix_expression: $ => prec.left(
                             2,
                             seq(
                               field('left', $._simple_expression),
                               field('operator', $.identifier),
                               field('right', $._expression)
                             )
                           ),
    /*
     * scalar2c.ebnf:202
     * prefix_expression            ::= 3(('+' | '-' | '!' | '~') _simple_expression)
     */
    prefix_expression: $ => prec(3, seq(choice('+', '-', '!', '~'), $._simple_expression)),
    /*
     * scalar2c.ebnf:203
     * tuple_expression             ::= '(' _expression (',' _expression)+ ')'
     */
    tuple_expression: $ => seq('(', $._expression, repeat1(seq(',', $._expression)), ')'),
    /*
     * scalar2c.ebnf:204
     * parenthesized_expression     ::= '(' _expression ')'
     */
    parenthesized_expression: $ => seq('(', $._expression, ')'),
    /*
     * scalar2c.ebnf:205
     * type_arguments               ::= '[' (_type (',' _type)*) ']'
     */
    type_arguments: $ => seq('[', seq($._type, repeat(seq(',', $._type))), ']'),
    /*
     * scalar2c.ebnf:206
     * arguments                    ::= '(' (_expression (',' _expression)*)? ')'
     */
    arguments: $ => seq('(', optional(seq($._expression, repeat(seq(',', $._expression)))), ')'),
    /*
     * scalar2c.ebnf:224
     * identifier                   ::= /($opchar+|$idRegex|$varidRegex|[`]$varidRegex[`])/
     */
    identifier: $ => /([\-!#%&*+/\\:<=>?@\u005e\u007c~]+|([\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[\-!#%&*+/\\:<=>?@\u005e\u007c~]+)?|[\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F_][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[\-!#%&*+/\\:<=>?@\u005e\u007c~]+)?|[\-!#%&*+/\\:<=>?@\u005e\u007c~]+)|[`]([\u0020-\u005f\u0061-\u007f]|(\\u+[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]|\\[btnfr"'\\]))*[`]|[\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F_][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[\-!#%&*+/\\:<=>?@\u005e\u007c~]+)?|[`][\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F_][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[\-!#%&*+/\\:<=>?@\u005e\u007c~]+)?[`])/,
    /*
     * scalar2c.ebnf:225
     * wildcard                     ::= '_'
     */
    wildcard: $ => '_',
    /*
     * scalar2c.ebnf:237
     * number                       ::= $integer_literal | $floating_point_literal
     */
    number: $ => choice(
                   /-?([0-9]+|0[xX][0-9a-fA-F]+)[Ll]?/,
                   /-?([0-9]+[.][0-9]+([Ee][+-]?[0-9]+)?[FfDd]?|[.][0-9]+([Ee][+-]?[0-9]+)?[FfDd]?|[0-9]+([Ee][+-]?[0-9]+)?[FfDd]|[0-9]+([Ee][+-]?[0-9]+)[FfDd]?)/
                 ),
    /*
     * scalar2c.ebnf:238
     * boolean_literal              ::= 'true' | 'false'
     */
    boolean_literal: $ => choice('true', 'false'),
    /*
     * scalar2c.ebnf:239
     * character_literal            ::= /'([\u0020-\u0026\u0028-\u007f]|\\[btnfr"'\\]|\\u+[0-9a-fA-F]{4})'/
     */
    character_literal: $ => /'([\u0020-\u0026\u0028-\u007f]|\\[btnfr"'\\]|\\u+[0-9a-fA-F]{4})'/,
    /*
     * scalar2c.ebnf:240
     * symbol_literal               ::= @("'" [^\\'\n]+)
     */
    symbol_literal: $ => token(seq("'", repeat1(/[^\\'\n]/))),
    /*
     * scalar2c.ebnf:242
     * _interpolation_string_prefix ::= !(($upper $idrest): interpolation_name '"') | !($varidRegex: interpolation_name '"')
     */
    _interpolation_string_prefix: $ => choice(
                                         token.immediate(
                                           seq(
                                             field(
                                               'interpolation_name',
                                               seq(
                                                 /[\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$]/,
                                                 repeat(
                                                   /[\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]/
                                                 ),
                                                 optional(repeat1(/[\-!#%&*+/\\:<=>?@\u005e\u007c~]/))
                                               )
                                             ),
                                             '"'
                                           )
                                         ),
                                         token.immediate(
                                           seq(
                                             /[\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F_]/,
                                             repeat(
                                               /[\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]/
                                             ),
                                             field('interpolation_name', optional(repeat1(/[\-!#%&*+/\\:<=>?@\u005e\u007c~]/))),
                                             '"'
                                           )
                                         )
                                       ),
    /*
     * scalar2c.ebnf:244-245
     * interpolated_string          ::= _interpolation_string_prefix ($charMinusQuoteDollar | _escape)* '"'
     *                                | _interpolation_string_prefix '""' ('"'? '"'? $charMinusQuoteDollar | _escape)* '"'? '"""'
     */
    interpolated_string: $ => choice(
                                seq($._interpolation_string_prefix, repeat(choice(/[^"\$]/, $._escape)), '"'),
                                seq(
                                  $._interpolation_string_prefix,
                                  '""',
                                  repeat(choice(seq(optional('"'), optional('"'), /[^"\$]/), $._escape)),
                                  optional('"'),
                                  '"""'
                                )
                              ),
    /*
     * scalar2c.ebnf:246
     * _escape                      ::= "$$" | "$" identifier | "$" block
     */
    _escape: $ => choice("$$", seq("$", $.identifier), seq("$", $.block)),
    /*
     * scalar2c.ebnf:247
     * _raw_string                  ::= /"""("?"?[^"])*"*"""/
     */
    _raw_string: $ => /"""("?"?[^"])*"*"""/,
    /*
     * scalar2c.ebnf:248
     * _simple_string               ::= '"' /[^"\n]|$escapeSeq/* '"' | '""'
     */
    _simple_string: $ => choice(
                           seq(
                             '"',
                             repeat(/[^"\n]|(\\u+[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]|\\[btnfr"'\\])/),
                             '"'
                           ),
                           '""'
                         ),
    /*
     * scalar2c.ebnf:252
     * string_literal               ::= _simple_string | _raw_string
     */
    string_literal: $ => choice($._simple_string, $._raw_string),
    /*
     * scalar2c.ebnf:253-254
     * _semicolon                   ::= ';' | _automatic_semicolon
     * ;comment ::= '/*' (/[^*]*\*+([^/*][^*]*\*+)*∕ | comment)* '/'
     */
    _semicolon: $ => choice(';', $._automatic_semicolon),
    /*
     * scalar2c.ebnf:255
     * comment                      ::= @(('//' /.*∕) | '/*' /[^*]*\*+([^/*][^*]*\*+)*∕ '/')
     */
    comment: $ => token(choice(seq('//', /.*/), seq('/*', /[^*]*\*+([^/*][^*]*\*+)*/, '/')))
  }
});
