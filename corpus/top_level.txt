================================
Top level imports
================================
package foo

import foo._
import foo.bar
import foo.{ x => _, _ }
--------------------------------
(compilation_unit (package_identifier (identifier)) (import_declaration (identifier) (wildcard)) (import_declaration (stable_identifier
(identifier) (identifier))) (import_declaration (identifier) (import_selectors (renamed_identifier (identifier) (wildcard)) (identifier))))

================================
Empty
================================
--------------------------------
(compilation_unit)

================================
Top level package only
================================
package foo
--------------------------------
(compilation_unit (package_identifier (identifier)))

================================
Packaging
================================
package foo
package bar {
  import foo.bar
}
--------------------------------
(compilation_unit
  (package_identifier (identifier))
  (package_clause (package_identifier (identifier))
    (import_declaration (stable_identifier (identifier) (identifier)))))

================================
Package object
================================
package object bar {
  val x = 1
}

--------------------------------
(compilation_unit (package_object (identifier)
  (template_body (val_definition (identifier) (number)))))

================================
Top level val definition
================================
val x: Int = 1
--------------------------------
(compilation_unit (val_definition (identifier) (type_identifier) (number)))

====================================
Class definitions
====================================
class Foo
class Foo[T]
class Foo[T] @bar()
class Foo[T] private
class Foo[T] protected
class Foo[T] @bar() private
class Foo[T]()
class Foo[T] @foo(x = 1) ()
class Foo[T] private ()
class Foo[T] @foo() private ()
class Foo(x: Int, y: Int)(z: String)(w: Double)
class Foo(x: Int)(implicit z: String)
@foo private final sealed implicit case class Foo(x: Int)
class Foo extends { val x = 1 } with Bar

------------------------------------
(compilation_unit
  (class_definition (identifier))
  (class_definition (identifier) (type_parameters (identifier)))
  (class_definition (identifier) (type_parameters (identifier))
    (constructor_annotation (type_identifier) (arguments)))
  (class_definition (identifier) (type_parameters (identifier)) (access_modifier))
  (class_definition (identifier) (type_parameters (identifier)) (access_modifier))
  (class_definition (identifier) (type_parameters (identifier))
    (constructor_annotation (type_identifier) (arguments)) (access_modifier))
  (class_definition (identifier) (type_parameters (identifier)) (class_parameters))
  (class_definition (identifier) (type_parameters (identifier))
    (constructor_annotation (type_identifier) (arguments
      (assignment_expression (identifier) (number))))
    (class_parameters))
  (class_definition (identifier) (type_parameters (identifier)) (access_modifier) (class_parameters))
  (class_definition (identifier) (type_parameters (identifier))
    (constructor_annotation (type_identifier) (arguments)) (access_modifier) (class_parameters))
  (class_definition (identifier)
    (class_parameters
      (class_parameter (identifier) (type_identifier))
      (class_parameter (identifier) (type_identifier)))
    (class_parameters (class_parameter (identifier) (type_identifier)))
    (class_parameters (class_parameter (identifier) (type_identifier))))
  (class_definition (identifier)
    (class_parameters (class_parameter (identifier) (type_identifier)))
    (class_parameters (class_parameter (identifier) (type_identifier))))
  (class_definition
    (annotation (type_identifier))
    (modifiers (access_modifier) (local_modifier) (local_modifier) (local_modifier))
    (identifier)
    (class_parameters (class_parameter (identifier) (type_identifier))))
  (class_definition (identifier)
    (early_definitions (early_definition (val_definition (identifier) (number))))
    (constructor (type_identifier))))

